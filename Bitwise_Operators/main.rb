#! C:\Ruby25-x64\bin\ruby.exe
# encoding: utf-8

# 2進数で表記 2が出力(binary)
p 0b00000010

# 16進数で表記 16が出力(hex decimal)
p 0x00000010

# ビット演算子(先頭が0の場合は省略して出力される)
# 2進数で出力
p 26.to_s(2)

# 16進数で出力
p 26.to_s(16)

# ビット反転(0, 1を反転させる)
p (~0b10101010).to_i.to_s(2)

# AND演算子(両方とも1が立っていれば1を、そうでない場合は0を返す)
p (0b01010101 & 0b00100101).to_s(2)

# OR演算子(どちらか一方に1が立っていれば1を、両方0の場合は0を返す)
p (0b01010101 | 0b00100101).to_s(2)

# XOR演算子(両方1、両方0が立っている場合0を、それ以外は１を返す)
p (0b01010101 ^ 0b00100101).to_s(2)

# ビットシフト演算子
# 左に2つシフトする
# 2つ移動とは即ち、末尾に00を付与すること => 数値にすると4倍をしている
p (0b00011010 << 2).to_s(2)

# 右に3つシフトする
# 右に3つとは即ち、末尾の3つを削除し、先頭を0で埋めること => こっちは下位ビットに1が立っている場合や2**0の部分を考慮すると単純に1/9倍というわけではない
p (0b00011010 >> 3).to_s(2)

# マスクを使用することで
# 複数のフラグをまとめて立てる
# 複数のフラグをまとめて消す
# 必要な情報だけを取り出すためにマスクした部分の情報を取得する

# |=を使用することでOR演算子即ち、まとめてマスクで表された部分のフラグを立てる
# &=を使用することでAND演算子即ち、まとめてマスクで表された部分のフラグを消す
a = Main.new
a.aaa
class Main
def aaa
	puts 'a'
end
end
